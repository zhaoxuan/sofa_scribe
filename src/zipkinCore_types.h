/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef zipkinCore_TYPES_H
#define zipkinCore_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct AnnotationType {
  enum type {
    BOOL = 0,
    BYTES = 1,
    I16 = 2,
    I32 = 3,
    I64 = 4,
    DOUBLE = 5,
    STRING = 6
  };
};

extern const std::map<int, const char*> _AnnotationType_VALUES_TO_NAMES;

typedef struct _Endpoint__isset {
  _Endpoint__isset() : ipv4(false), port(false), service_name(false) {}
  bool ipv4;
  bool port;
  bool service_name;
} _Endpoint__isset;

class Endpoint {
 public:

  static const char* ascii_fingerprint; // = "C7D2D58463AC91C552EE8B325EA2ACCC";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xD2,0xD5,0x84,0x63,0xAC,0x91,0xC5,0x52,0xEE,0x8B,0x32,0x5E,0xA2,0xAC,0xCC};

  Endpoint() : ipv4(0), port(0), service_name() {
  }

  virtual ~Endpoint() throw() {}

  int32_t ipv4;
  int16_t port;
  std::string service_name;

  _Endpoint__isset __isset;

  void __set_ipv4(const int32_t val) {
    ipv4 = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_service_name(const std::string& val) {
    service_name = val;
  }

  bool operator == (const Endpoint & rhs) const
  {
    if (!(ipv4 == rhs.ipv4))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(service_name == rhs.service_name))
      return false;
    return true;
  }
  bool operator != (const Endpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Endpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Endpoint &a, Endpoint &b);

typedef struct _Annotation__isset {
  _Annotation__isset() : timestamp(false), value(false), host(false), duration(false) {}
  bool timestamp;
  bool value;
  bool host;
  bool duration;
} _Annotation__isset;

class Annotation {
 public:

  static const char* ascii_fingerprint; // = "A4BFBBE255098BC196C3C976B129CD5A";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xBF,0xBB,0xE2,0x55,0x09,0x8B,0xC1,0x96,0xC3,0xC9,0x76,0xB1,0x29,0xCD,0x5A};

  Annotation() : timestamp(0), value(), duration(0) {
  }

  virtual ~Annotation() throw() {}

  int64_t timestamp;
  std::string value;
  Endpoint host;
  int32_t duration;

  _Annotation__isset __isset;

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_host(const Endpoint& val) {
    host = val;
    __isset.host = true;
  }

  void __set_duration(const int32_t val) {
    duration = val;
    __isset.duration = true;
  }

  bool operator == (const Annotation & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.host != rhs.__isset.host)
      return false;
    else if (__isset.host && !(host == rhs.host))
      return false;
    if (__isset.duration != rhs.__isset.duration)
      return false;
    else if (__isset.duration && !(duration == rhs.duration))
      return false;
    return true;
  }
  bool operator != (const Annotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Annotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Annotation &a, Annotation &b);

typedef struct _BinaryAnnotation__isset {
  _BinaryAnnotation__isset() : key(false), value(false), annotation_type(false), host(false) {}
  bool key;
  bool value;
  bool annotation_type;
  bool host;
} _BinaryAnnotation__isset;

class BinaryAnnotation {
 public:

  static const char* ascii_fingerprint; // = "7673CBCF8AFC8A8C6EF00023E84E022D";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x73,0xCB,0xCF,0x8A,0xFC,0x8A,0x8C,0x6E,0xF0,0x00,0x23,0xE8,0x4E,0x02,0x2D};

  BinaryAnnotation() : key(), value(), annotation_type((AnnotationType::type)0) {
  }

  virtual ~BinaryAnnotation() throw() {}

  std::string key;
  std::string value;
  AnnotationType::type annotation_type;
  Endpoint host;

  _BinaryAnnotation__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_annotation_type(const AnnotationType::type val) {
    annotation_type = val;
  }

  void __set_host(const Endpoint& val) {
    host = val;
    __isset.host = true;
  }

  bool operator == (const BinaryAnnotation & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(annotation_type == rhs.annotation_type))
      return false;
    if (__isset.host != rhs.__isset.host)
      return false;
    else if (__isset.host && !(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const BinaryAnnotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BinaryAnnotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BinaryAnnotation &a, BinaryAnnotation &b);

typedef struct _Span__isset {
  _Span__isset() : trace_id(false), name(false), id(false), parent_id(false), annotations(false), binary_annotations(false), debug(true) {}
  bool trace_id;
  bool name;
  bool id;
  bool parent_id;
  bool annotations;
  bool binary_annotations;
  bool debug;
} _Span__isset;

class Span {
 public:

  static const char* ascii_fingerprint; // = "907A6AF2059290FA4FFCF10C7844E12B";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x7A,0x6A,0xF2,0x05,0x92,0x90,0xFA,0x4F,0xFC,0xF1,0x0C,0x78,0x44,0xE1,0x2B};

  Span() : trace_id(0), name(), id(0), parent_id(0), debug(false) {
  }

  virtual ~Span() throw() {}

  int64_t trace_id;
  std::string name;
  int64_t id;
  int64_t parent_id;
  std::vector<Annotation>  annotations;
  std::vector<BinaryAnnotation>  binary_annotations;
  bool debug;

  _Span__isset __isset;

  void __set_trace_id(const int64_t val) {
    trace_id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_parent_id(const int64_t val) {
    parent_id = val;
    __isset.parent_id = true;
  }

  void __set_annotations(const std::vector<Annotation> & val) {
    annotations = val;
  }

  void __set_binary_annotations(const std::vector<BinaryAnnotation> & val) {
    binary_annotations = val;
  }

  void __set_debug(const bool val) {
    debug = val;
    __isset.debug = true;
  }

  bool operator == (const Span & rhs) const
  {
    if (!(trace_id == rhs.trace_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (__isset.parent_id != rhs.__isset.parent_id)
      return false;
    else if (__isset.parent_id && !(parent_id == rhs.parent_id))
      return false;
    if (!(annotations == rhs.annotations))
      return false;
    if (!(binary_annotations == rhs.binary_annotations))
      return false;
    if (__isset.debug != rhs.__isset.debug)
      return false;
    else if (__isset.debug && !(debug == rhs.debug))
      return false;
    return true;
  }
  bool operator != (const Span &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Span & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Span &a, Span &b);



#endif
